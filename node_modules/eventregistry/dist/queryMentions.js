"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestMentionsRecentActivity = exports.RequestMentionsConceptGraph = exports.RequestMentionsKeywordAggr = exports.RequestMentionsSourceAggr = exports.RequestMentionsCategoryAggr = exports.RequestMentionsConceptAggr = exports.RequestMentionsTimeAggr = exports.RequestMentionsUriWgtList = exports.RequestMentionsInfo = exports.RequestMentions = exports.QueryMentionsIter = exports.QueryMentions = void 0;
var base_1 = require("./base");
var returnInfo_1 = require("./returnInfo");
var logger_1 = require("./logger");
var QueryMentions = /** @class */ (function (_super) {
    __extends(QueryMentions, _super);
    function QueryMentions(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.params = {};
        var eventTypeUri = args.eventTypeUri, keywords = args.keywords, conceptUri = args.conceptUri, categoryUri = args.categoryUri, sourceUri = args.sourceUri, sourceLocationUri = args.sourceLocationUri, sourceGroupUri = args.sourceGroupUri, industryUri = args.industryUri, sdgUri = args.sdgUri, sasbUri = args.sasbUri, esgUri = args.esgUri, locationUri = args.locationUri, lang = args.lang, dateStart = args.dateStart, dateEnd = args.dateEnd, ignoreEventTypeUri = args.ignoreEventTypeUri, ignoreKeywords = args.ignoreKeywords, ignoreConceptUri = args.ignoreConceptUri, ignoreCategoryUri = args.ignoreCategoryUri, ignoreSourceUri = args.ignoreSourceUri, ignoreSourceLocationUri = args.ignoreSourceLocationUri, ignoreSourceGroupUri = args.ignoreSourceGroupUri, ignoreIndustryUri = args.ignoreIndustryUri, ignoreSdgUri = args.ignoreSdgUri, ignoreSasbUri = args.ignoreSasbUri, ignoreEsgUri = args.ignoreEsgUri, ignoreLocationUri = args.ignoreLocationUri, ignoreLang = args.ignoreLang, showDuplicates = args.showDuplicates, _a = args.startSourceRankPercentile, startSourceRankPercentile = _a === void 0 ? 0 : _a, _b = args.endSourceRankPercentile, endSourceRankPercentile = _b === void 0 ? 100 : _b, _c = args.minSentiment, minSentiment = _c === void 0 ? -1 : _c, _d = args.maxSentiment, maxSentiment = _d === void 0 ? 1 : _d, minSentenceIndex = args.minSentenceIndex, maxSentenceIndex = args.maxSentenceIndex, _e = args.requestedResult, requestedResult = _e === void 0 ? new RequestMentions() : _e;
        _this.setVal("action", "getMentions");
        _this.setQueryArrVal(eventTypeUri, "eventTypeUri", undefined, "or");
        _this.setQueryArrVal(keywords, "keyword", "keywordOper", "and");
        _this.setQueryArrVal(conceptUri, "conceptUri", "conceptOper", "and");
        _this.setQueryArrVal(categoryUri, "categoryUri", "categoryOper", "or");
        _this.setQueryArrVal(sourceUri, "sourceUri", undefined, "or");
        _this.setQueryArrVal(sourceLocationUri, "sourceLocationUri", undefined, "or");
        _this.setQueryArrVal(sourceGroupUri, "sourceGroupUri", undefined, "or");
        _this.setQueryArrVal(industryUri, "industryUri", "industryOper", "or");
        _this.setQueryArrVal(sdgUri, "sdgUri", undefined, "or");
        _this.setQueryArrVal(sasbUri, "sasbUri", undefined, "or");
        _this.setQueryArrVal(esgUri, "esgUri", undefined, "or");
        _this.setQueryArrVal(locationUri, "locationUri", undefined, "or");
        _this.setQueryArrVal(lang, "lang", undefined, "or");
        if (dateStart !== undefined) {
            _this.setDateVal("dateStart", dateStart);
        }
        if (dateEnd !== undefined) {
            _this.setDateVal("dateEnd", dateEnd);
        }
        _this.setQueryArrVal(ignoreEventTypeUri, "ignoreEventTypeUri", undefined, "or");
        _this.setQueryArrVal(ignoreKeywords, "ignoreKeywords", undefined, "or");
        _this.setQueryArrVal(ignoreConceptUri, "ignoreConceptUri", undefined, "or");
        _this.setQueryArrVal(ignoreCategoryUri, "ignoreCategoryUri", undefined, "or");
        _this.setQueryArrVal(ignoreSourceUri, "ignoreSourceUri", undefined, "or");
        _this.setQueryArrVal(ignoreSourceLocationUri, "ignoreSourceLocationUri", undefined, "or");
        _this.setQueryArrVal(ignoreSourceGroupUri, "ignoreSourceGroupUri", undefined, "or");
        _this.setQueryArrVal(ignoreIndustryUri, "ignoreIndustryUri", undefined, "or");
        _this.setQueryArrVal(ignoreSdgUri, "ignoreSdgUri", undefined, "or");
        _this.setQueryArrVal(ignoreSasbUri, "ignoreSasbUri", undefined, "or");
        _this.setQueryArrVal(ignoreEsgUri, "ignoreEsgUri", undefined, "or");
        _this.setQueryArrVal(ignoreLocationUri, "ignoreLocationUri", undefined, "or");
        _this.setQueryArrVal(ignoreLang, "ignoreLang", undefined, "or");
        _this.setValIfNotDefault("showDuplicates", showDuplicates, false);
        if (startSourceRankPercentile < 0 || startSourceRankPercentile % 10 !== 0 || startSourceRankPercentile > 100) {
            throw new Error("StartSourceRankPercentile: Value should be in range 0-90 and divisible by 10.");
        }
        if (endSourceRankPercentile < 0 || endSourceRankPercentile % 10 !== 0 || endSourceRankPercentile > 100) {
            throw new Error("EndSourceRankPercentile: Value should be in range 0-90 and divisible by 10.");
        }
        if (startSourceRankPercentile > endSourceRankPercentile) {
            throw new Error("SourceRankPercentile: startSourceRankPercentile should be less than endSourceRankPercentile");
        }
        if (startSourceRankPercentile !== 0) {
            _this.setVal("startSourceRankPercentile", startSourceRankPercentile);
        }
        if (endSourceRankPercentile !== 100) {
            _this.setVal("endSourceRankPercentile", endSourceRankPercentile);
        }
        if (minSentiment > -1 && minSentiment <= 1) {
            _this.setVal("minSentiment", minSentiment);
        }
        if (maxSentiment >= -1 && maxSentiment < 1) {
            _this.setVal("maxSentiment", maxSentiment);
        }
        if (!!minSentenceIndex && minSentenceIndex > 0) {
            _this.setVal("minSentenceIndex", minSentenceIndex);
        }
        if (!!maxSentenceIndex && maxSentenceIndex > 0) {
            _this.setVal("maxSentenceIndex", maxSentenceIndex);
        }
        _this.setRequestedResult(requestedResult);
        return _this;
    }
    Object.defineProperty(QueryMentions.prototype, "path", {
        get: function () {
            return "/api/v1/eventType/mention";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the single result type that you would like to be returned. Any previously set result types will be overwritten.
     * Result types can be the classes that extend RequestMentions base class (see classes below).
     */
    QueryMentions.prototype.setRequestedResult = function (requestMentions) {
        if (!(requestMentions instanceof RequestMentions)) {
            throw new Error("QueryMentions class can only accept result requests that are of type RequestMentions");
        }
        this.resultTypeList = [
            requestMentions,
        ];
    };
    QueryMentions.initWithMentionUriList = function (uriList) {
        var q = new QueryMentions();
        if (!Array.isArray(uriList)) {
            throw new Error("uriList has to be a list of strings that represent mention uris");
        }
        q.params = {
            action: "getMentions",
            mentionUri: uriList,
        };
    };
    QueryMentions.initWithMentionUriWgtList = function (uriWgtList) {
        var q = new QueryMentions();
        if (!Array.isArray(uriWgtList)) {
            throw new Error("uriList has to be a list of strings that represent mention uris");
        }
        q.params = {
            action: "getMentions",
            mentionUriWgtList: uriWgtList.join(","),
        };
        return q;
    };
    QueryMentions.initWithComplexQuery = function (complexQuery) {
        var query = new QueryMentions();
        if (typeof complexQuery === "string") {
            query.setVal("query", complexQuery);
        }
        else if (typeof complexQuery === "object" && complexQuery !== null) {
            query.setVal("query", JSON.stringify(complexQuery));
        }
        else {
            throw new Error("The instance of query parameter was not a string or an object");
        }
        return query;
    };
    return QueryMentions;
}(base_1.Query));
exports.QueryMentions = QueryMentions;
var QueryMentionsIter = /** @class */ (function (_super) {
    __extends(QueryMentionsIter, _super);
    function QueryMentionsIter(er, args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this, args) || this;
        _this.page = 0;
        _this.pages = 1;
        _this.items = [];
        _this.returnedSoFar = 0;
        _this.index = 0;
        _this.callback = function () { };
        _this.doneCallback = function () { };
        var _a = args.sortBy, sortBy = _a === void 0 ? "rel" : _a, _b = args.sortByAsc, sortByAsc = _b === void 0 ? false : _b, _c = args.returnInfo, returnInfo = _c === void 0 ? undefined : _c, _d = args.maxItems, maxItems = _d === void 0 ? -1 : _d;
        _this.er = er;
        _this.sortBy = sortBy;
        _this.sortByAsc = sortByAsc;
        _this.returnInfo = returnInfo;
        _this.maxItems = maxItems;
        return _this;
    }
    QueryMentionsIter.prototype[Symbol.asyncIterator] = function () {
        var _this = this;
        return {
            next: function () { return __awaiter(_this, void 0, void 0, function () {
                var item;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.index >= this.items.length)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getNextBatch()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            item = this.items[this.index];
                            this.index++;
                            return [2 /*return*/, { value: item, done: !item }];
                    }
                });
            }); },
        };
    };
    QueryMentionsIter.prototype.count = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.setRequestedResult(new RequestMentionsInfo());
                        return [4 /*yield*/, this.er.execQuery(this)];
                    case 1:
                        response = _b.sent();
                        if (response === null || response === void 0 ? void 0 : response.error) {
                            this.er.logger.error(response.error);
                        }
                        return [2 /*return*/, ((_a = response.mentions) === null || _a === void 0 ? void 0 : _a.totalResults) || 0];
                }
            });
        });
    };
    /**
     * Execute query and fetch batches of articles of the specified size (eventBatchSize)
     * @param callback callback function that'll be called every time we get a new batch of events from the backend
     * @param doneCallback callback function that'll be called when everything is complete
     */
    QueryMentionsIter.prototype.execQuery = function (callback, doneCallback) {
        if (callback) {
            this.callback = callback;
        }
        if (doneCallback) {
            this.doneCallback = doneCallback;
        }
        this.iterate();
    };
    QueryMentionsIter.initWithComplexQuery = function (er, complexQuery, args) {
        if (args === void 0) { args = {}; }
        var query = new QueryMentionsIter(er, args);
        if (typeof complexQuery === "string") {
            query.setVal("query", complexQuery);
        }
        else if (typeof complexQuery === "object" && complexQuery !== null) {
            query.setVal("query", JSON.stringify(complexQuery));
        }
        else {
            throw new Error("The instance of query parameter was not a string or an object");
        }
        return query;
    };
    QueryMentionsIter.prototype.iterate = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.current) return [3 /*break*/, 1];
                        this.callback(this.current);
                        this.index += 1;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.getNextBatch()];
                    case 2:
                        if (!(_a.sent())) {
                            this.doneCallback(this.errorMessage);
                            return [2 /*return*/];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.iterate()];
                }
            });
        });
    };
    /**
     * Extract the results according to maxItems
     * @param response response from the backend
     */
    QueryMentionsIter.prototype.extractResults = function (response) {
        var _a;
        var results = ((_a = response.mentions) === null || _a === void 0 ? void 0 : _a.results) || [];
        var extractedSize = this.maxItems !== -1 ? this.maxItems - this.returnedSoFar : results.length;
        return results.slice(0, extractedSize).filter(Boolean);
    };
    Object.defineProperty(QueryMentionsIter.prototype, "current", {
        get: function () {
            return this.items[this.index] || undefined;
        },
        enumerable: false,
        configurable: true
    });
    QueryMentionsIter.prototype.getNextBatch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var requestMentionsInfo, response, error, results, error_1;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        this.page += 1;
                        if (this.page > this.pages || (this.maxItems !== -1 && this.returnedSoFar >= this.maxItems)) {
                            return [2 /*return*/, false];
                        }
                        requestMentionsInfo = new RequestMentionsInfo({
                            page: this.page,
                            count: 50,
                            sortBy: this.sortBy,
                            sortByAsc: this.sortByAsc,
                            returnInfo: this.returnInfo,
                        });
                        this.setRequestedResult(requestMentionsInfo);
                        if (this.er.verboseOutput) {
                            this.er.logger.info("Downloading mentions page ".concat(this.page, "..."));
                        }
                        return [4 /*yield*/, this.er.execQuery(this, this.er.allowUseOfArchive)];
                    case 1:
                        response = _b.sent();
                        error = (response === null || response === void 0 ? void 0 : response.error) || "";
                        if (error) {
                            this.errorMessage = "Error while obtaining a list of mentions:  ".concat(response === null || response === void 0 ? void 0 : response.error);
                        }
                        else {
                            this.pages = ((_a = response.mentions) === null || _a === void 0 ? void 0 : _a.pages) || 0;
                        }
                        results = this.extractResults(response);
                        this.returnedSoFar += results.length;
                        this.items = __spreadArray(__spreadArray([], __read(this.items), false), __read(results), false);
                        return [2 /*return*/, true];
                    case 2:
                        error_1 = _b.sent();
                        this.er.logger.error(error_1);
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return QueryMentionsIter;
}(QueryMentions));
exports.QueryMentionsIter = QueryMentionsIter;
var RequestMentions = /** @class */ (function () {
    function RequestMentions() {
    }
    return RequestMentions;
}());
exports.RequestMentions = RequestMentions;
var RequestMentionsInfo = /** @class */ (function (_super) {
    __extends(RequestMentionsInfo, _super);
    function RequestMentionsInfo(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "mentions";
        var _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 100 : _b, _c = args.sortBy, sortBy = _c === void 0 ? "date" : _c, _d = args.sortByAsc, sortByAsc = _d === void 0 ? false : _d, _e = args.returnInfo, returnInfo = _e === void 0 ? undefined : _e;
        if (page < 1) {
            throw new RangeError("Page has to be >= 1");
        }
        if (count > 100) {
            throw new RangeError("At most 100 mentions can be returned per call");
        }
        _this.params = {};
        _this.params["mentionsPage"] = page;
        _this.params["mentionsCount"] = count;
        _this.params["mentionsSortBy"] = sortBy;
        _this.params["mentionsSortByAsc"] = sortByAsc;
        if (returnInfo) {
            _this.params = __assign(__assign({}, _this.params), returnInfo.getParams("mentions"));
        }
        return _this;
    }
    Object.defineProperty(RequestMentionsInfo.prototype, "page", {
        set: function (page) {
            if (page < 1) {
                throw new RangeError("Page has to be >= 1");
            }
            this.params["mentionsPage"] = page;
        },
        enumerable: false,
        configurable: true
    });
    return RequestMentionsInfo;
}(RequestMentions));
exports.RequestMentionsInfo = RequestMentionsInfo;
var RequestMentionsUriWgtList = /** @class */ (function (_super) {
    __extends(RequestMentionsUriWgtList, _super);
    function RequestMentionsUriWgtList(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "uriWgtList";
        var _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 10000 : _b, _c = args.sortBy, sortBy = _c === void 0 ? "fq" : _c, _d = args.sortByAsc, sortByAsc = _d === void 0 ? false : _d, unsupported = __rest(args, ["page", "count", "sortBy", "sortByAsc"]);
        if (Object.keys(unsupported).length !== 0) {
            logger_1.Logger.warn("RequestMentionsUriWgtList: Unsupported parameters detected: ".concat(JSON.stringify(unsupported), ". Please check the documentation."));
        }
        if (page < 1) {
            throw new RangeError("Page has to be >= 1");
        }
        if (count > 50000) {
            throw new RangeError("At most 50000 results can be returned per call");
        }
        _this.params = {};
        _this.params["uriWgtListPage"] = page;
        _this.params["uriWgtListCount"] = count;
        _this.params["uriWgtListSortBy"] = sortBy;
        _this.params["uriWgtListSortByAsc"] = sortByAsc;
        return _this;
    }
    Object.defineProperty(RequestMentionsUriWgtList.prototype, "page", {
        set: function (page) {
            if (page < 1) {
                throw new RangeError("Page has to be >= 1");
            }
            this.params["uriWgtListPage"] = page;
        },
        enumerable: false,
        configurable: true
    });
    return RequestMentionsUriWgtList;
}(RequestMentions));
exports.RequestMentionsUriWgtList = RequestMentionsUriWgtList;
var RequestMentionsTimeAggr = /** @class */ (function (_super) {
    __extends(RequestMentionsTimeAggr, _super);
    function RequestMentionsTimeAggr() {
        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
        _this.resultType = "timeAggr";
        return _this;
    }
    return RequestMentionsTimeAggr;
}(RequestMentions));
exports.RequestMentionsTimeAggr = RequestMentionsTimeAggr;
var RequestMentionsConceptAggr = /** @class */ (function (_super) {
    __extends(RequestMentionsConceptAggr, _super);
    function RequestMentionsConceptAggr(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "conceptAggr";
        var _a = args.conceptCount, conceptCount = _a === void 0 ? 25 : _a, _b = args.mentionsSampleSize, mentionsSampleSize = _b === void 0 ? 100000 : _b, _c = args.conceptScoring, conceptScoring = _c === void 0 ? "importance" : _c, _d = args.conceptCountPerType, conceptCountPerType = _d === void 0 ? undefined : _d, _e = args.returnInfo, returnInfo = _e === void 0 ? new returnInfo_1.ReturnInfo() : _e;
        if (conceptCount > 500) {
            throw new RangeError("At most 500 top concepts can be returned");
        }
        if (mentionsSampleSize > 20000) {
            throw new RangeError("At most 20000 results can be used for computing");
        }
        _this.params = {};
        _this.params["conceptAggrConceptCount"] = conceptCount;
        _this.params["conceptAggrSampleSize"] = mentionsSampleSize;
        _this.params["conceptAggrScoring"] = conceptScoring;
        if (!!conceptCountPerType) {
            _this.params["conceptAggrConceptCountPerType"] = conceptCountPerType;
        }
        _this.params = __assign(__assign({}, _this.params), returnInfo.getParams("conceptAggr"));
        return _this;
    }
    return RequestMentionsConceptAggr;
}(RequestMentions));
exports.RequestMentionsConceptAggr = RequestMentionsConceptAggr;
var RequestMentionsCategoryAggr = /** @class */ (function (_super) {
    __extends(RequestMentionsCategoryAggr, _super);
    function RequestMentionsCategoryAggr(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "categoryAggr";
        var _a = args.mentionsSampleSize, mentionsSampleSize = _a === void 0 ? 20000 : _a, _b = args.returnInfo, returnInfo = _b === void 0 ? new returnInfo_1.ReturnInfo() : _b;
        if (mentionsSampleSize > 50000) {
            throw new RangeError("At most 50000 results can be used for aggregation");
        }
        _this.params["categoryAggrSampleSize"] = mentionsSampleSize;
        _this.params = returnInfo.getParams("categoryAggr");
        return _this;
    }
    return RequestMentionsCategoryAggr;
}(RequestMentions));
exports.RequestMentionsCategoryAggr = RequestMentionsCategoryAggr;
var RequestMentionsSourceAggr = /** @class */ (function (_super) {
    __extends(RequestMentionsSourceAggr, _super);
    function RequestMentionsSourceAggr(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "sourceAggr";
        var _a = args.sourceCount, sourceCount = _a === void 0 ? 50 : _a, _b = args.normalizeBySourceArts, normalizeBySourceArts = _b === void 0 ? false : _b, _c = args.returnInfo, returnInfo = _c === void 0 ? new returnInfo_1.ReturnInfo() : _c;
        _this.params["sourceAggrSourceCount"] = sourceCount;
        _this.params = returnInfo.getParams("sourceAggr");
        return _this;
    }
    return RequestMentionsSourceAggr;
}(RequestMentions));
exports.RequestMentionsSourceAggr = RequestMentionsSourceAggr;
var RequestMentionsKeywordAggr = /** @class */ (function (_super) {
    __extends(RequestMentionsKeywordAggr, _super);
    function RequestMentionsKeywordAggr(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "keywordAggr";
        var _a = args.mentionsSampleSize, mentionsSampleSize = _a === void 0 ? 2000 : _a;
        if (mentionsSampleSize > 20000) {
            throw new RangeError("At most 20000 results can be used for aggregation");
        }
        _this.params["keywordAggrSampleSize"] = mentionsSampleSize;
        return _this;
    }
    return RequestMentionsKeywordAggr;
}(RequestMentions));
exports.RequestMentionsKeywordAggr = RequestMentionsKeywordAggr;
var RequestMentionsConceptGraph = /** @class */ (function (_super) {
    __extends(RequestMentionsConceptGraph, _super);
    function RequestMentionsConceptGraph(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "conceptGraph";
        var _a = args.conceptCount, conceptCount = _a === void 0 ? 25 : _a, _b = args.linkCount, linkCount = _b === void 0 ? 50 : _b, _c = args.mentionsSampleSize, mentionsSampleSize = _c === void 0 ? 10000 : _c, _d = args.skipQueryConcepts, skipQueryConcepts = _d === void 0 ? true : _d, _e = args.returnInfo, returnInfo = _e === void 0 ? new returnInfo_1.ReturnInfo() : _e;
        if (conceptCount > 1000) {
            throw new RangeError("At most 1000 top concepts can be returned");
        }
        if (linkCount > 2000) {
            throw new RangeError("At most 2000 links between concepts can be returned");
        }
        if (mentionsSampleSize > 50000) {
            throw new RangeError("At most 50000 results can be used for computing");
        }
        _this.params = {};
        _this.params["conceptGraphConceptCount"] = conceptCount;
        _this.params["conceptGraphLinkCount"] = linkCount;
        _this.params["conceptGraphSampleSize"] = mentionsSampleSize;
        _this.params["conceptGraphSkipQueryConcepts"] = skipQueryConcepts;
        _this.params = __assign(__assign({}, _this.params), returnInfo.getParams("conceptGraph"));
        return _this;
    }
    return RequestMentionsConceptGraph;
}(RequestMentions));
exports.RequestMentionsConceptGraph = RequestMentionsConceptGraph;
var RequestMentionsRecentActivity = /** @class */ (function (_super) {
    __extends(RequestMentionsRecentActivity, _super);
    function RequestMentionsRecentActivity(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.resultType = "recentActivityMentions";
        var _a = args.maxMentionCount, maxMentionCount = _a === void 0 ? 100 : _a, _b = args.updatesAfterUri, updatesAfterUri = _b === void 0 ? undefined : _b, _c = args.updatesAfterTm, updatesAfterTm = _c === void 0 ? undefined : _c, _d = args.updatesAfterMinsAgo, updatesAfterMinsAgo = _d === void 0 ? undefined : _d, _e = args.updatesUntilTm, updatesUntilTm = _e === void 0 ? undefined : _e, _f = args.updatesUntilMinsAgo, updatesUntilMinsAgo = _f === void 0 ? undefined : _f, _g = args.mandatorySourceLocation, mandatorySourceLocation = _g === void 0 ? false : _g, _h = args.returnInfo, returnInfo = _h === void 0 ? undefined : _h;
        if (maxMentionCount > 2000) {
            throw new RangeError("At most 2000 mentions can be returned");
        }
        if (updatesAfterTm !== undefined && updatesAfterMinsAgo !== undefined) {
            throw new Error("You should specify either updatesAfterTm or updatesAfterMinsAgo parameter, but not both");
        }
        if (updatesUntilTm !== undefined && updatesUntilMinsAgo !== undefined) {
            throw new Error("You should specify either updatesUntilTm or updatesUntilMinsAgo parameter, but not both");
        }
        _this.params = {};
        _this.params["recentActivityMentionsMaxMentionCount"] = maxMentionCount;
        if (updatesAfterTm !== undefined) {
            _this.params["recentActivityMentionsUpdatesAfterTm"] = base_1.QueryParamsBase.encodeDateTime(updatesAfterTm);
        }
        if (updatesAfterMinsAgo !== undefined) {
            _this.params["recentActivityMentionsUpdatesAfterMinsAgo"] = updatesAfterMinsAgo;
        }
        if (updatesUntilTm !== undefined) {
            _this.params["recentActivityMentionsUpdatesUntilTm"] = base_1.QueryParamsBase.encodeDateTime(updatesUntilTm);
        }
        if (updatesUntilMinsAgo !== undefined) {
            _this.params["recentActivityMentionsUpdatesUntilMinsAgo"] = updatesUntilMinsAgo;
        }
        if (updatesAfterUri !== undefined) {
            _this.params["recentActivityMentionsUpdatesAfterUri"] = updatesAfterUri;
        }
        _this.params["recentActivityMentionsMandatorySourceLocation"] = mandatorySourceLocation;
        if (returnInfo !== undefined) {
            _this.params = __assign(__assign({}, _this.params), returnInfo.getParams("recentActivityMentions"));
        }
        return _this;
    }
    return RequestMentionsRecentActivity;
}(RequestMentions));
exports.RequestMentionsRecentActivity = RequestMentionsRecentActivity;
//# sourceMappingURL=queryMentions.js.map