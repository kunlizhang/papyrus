"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Analytics = void 0;
// The Analytics class can be used for access the text analytics services provided by the Event Registry.
// These include:
// - text annotation: identifying the list of entities and non-entities mentioned in the provided text
// - text categorization: identification of up to 5 categories that describe the topic of the given text.
//     The list of available categories come from DMOZ open directory. Currently, only English text can be categorized!
// - sentiment detection: what is the sentiment expressed in the given text
// - language detection: detect in which language is the given text written
// NOTE: the functionality is currently in BETA. The API calls or the provided outputs may change in the future.
var Analytics = /** @class */ (function () {
    /**
     * @param eventRegistry: instance of EventRegistry class
     */
    function Analytics(er) {
        this.er = er;
    }
    /**
     * Identify the list of entities and nonentities mentioned in the text
     * @param text input text to annotate
     * @param lang language of the provided document (can be an ISO2 or ISO3 code). If None is provided, the language will be automatically detected
     */
    Analytics.prototype.annotate = function (text, lang, customParams) {
        return __awaiter(this, void 0, void 0, function () {
            var params, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = { lang: lang, text: text };
                        if (!!customParams) {
                            params = __assign(__assign({}, params), customParams);
                        }
                        return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/annotate", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Determine the set of up to 5 categories the text is about. Currently, only English text can be categorized!
     * @param text input text to categorize
     * @param taxonomy: which taxonomy use for categorization. Options:
     *  - "dmoz" (over 5000 categories in 3 levels, English language only)
     *  - "news" (general news categorization, 9 categories, any langauge)
     */
    Analytics.prototype.categorize = function (text_1) {
        return __awaiter(this, arguments, void 0, function (text, taxonomy) {
            var response;
            if (taxonomy === void 0) { taxonomy = "dmoz"; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/categorize", { text: text, taxonomy: taxonomy })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * determine the sentiment of the provided text in English language
     * @param text input text to categorize
     * @param method method to use to compute the sentiment. possible values are "vocabulary" (vocabulary based sentiment analysis) and "rnn" (neural network based sentiment classification)
     */
    Analytics.prototype.sentiment = function (text_1) {
        return __awaiter(this, arguments, void 0, function (text, method, sentences, returnSentences) {
            var params, response;
            if (method === void 0) { method = "vocabulary"; }
            if (sentences === void 0) { sentences = 10; }
            if (returnSentences === void 0) { returnSentences = true; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!["vocabulary", "rnn"].includes(method)) {
                            throw new Error("method: Please pass in either 'vocabulary' or 'rnn'");
                        }
                        params = {
                            text: text,
                            method: method,
                            sentences: sentences,
                            returnSentences: returnSentences,
                        };
                        return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/sentiment", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    Analytics.prototype.semanticSimilarity = function (text1_1, text2_1) {
        return __awaiter(this, arguments, void 0, function (text1, text2, distanceMeasure) {
            var response;
            if (distanceMeasure === void 0) { distanceMeasure = "cosine"; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/semanticSimilarity", { text1: text1, text2: text2, distanceMeasure: distanceMeasure })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Determine the language of the given text
     * @param text input text to analyse
     */
    Analytics.prototype.detectLanguage = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/detectLanguage", { text: text })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Extract all available information about an article available at url `url`.
     * Returned information will include article title, body, authors, links in the articles,...
     * @param url article url that'll be used for extraction
     * @param proxyUrl proxy that should be used for downloading article information. format: {schema}://{username}:{pass}@{proxy url/ip}
     */
    Analytics.prototype.extractArticleInfo = function (url, proxyUrl, headers, cookies) {
        return __awaiter(this, void 0, void 0, function () {
            var params, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = { url: url };
                        if (!!proxyUrl) {
                            params.proxyUrl = proxyUrl;
                        }
                        return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/extractArticleInfo", params, headers, cookies)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Extract named entities from the provided text. Supported languages are English, German, Spanish and Chinese.
     * @param text: text on which to extract named entities
     */
    Analytics.prototype.ner = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/ner", { text: text })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Create a new topic and train it using the tweets that match the twitterQuery
     * @param twitterQuery string containing the content to search for. It can be a Twitter user account (using "@" prefix or user's Twitter url),a hash tag (using "#" prefix) or a regular keyword.
     * @param args Object which contains a host of optional parameters
     */
    Analytics.prototype.trainTopicOnTweets = function (twitterQuery_1) {
        return __awaiter(this, arguments, void 0, function (twitterQuery, args) {
            var _a, useTweetText, _b, useIdfNormalization, _c, normalization, _d, maxTweets, _e, maxUsedLinks, _f, ignoreConceptTypes, _g, maxConcepts, _h, maxCategories, _j, notifyEmailAddress, params, response;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _a = args.useTweetText, useTweetText = _a === void 0 ? true : _a, _b = args.useIdfNormalization, useIdfNormalization = _b === void 0 ? true : _b, _c = args.normalization, normalization = _c === void 0 ? "linear" : _c, _d = args.maxTweets, maxTweets = _d === void 0 ? 2000 : _d, _e = args.maxUsedLinks, maxUsedLinks = _e === void 0 ? 500 : _e, _f = args.ignoreConceptTypes, ignoreConceptTypes = _f === void 0 ? [] : _f, _g = args.maxConcepts, maxConcepts = _g === void 0 ? 20 : _g, _h = args.maxCategories, maxCategories = _h === void 0 ? 10 : _h, _j = args.notifyEmailAddress, notifyEmailAddress = _j === void 0 ? undefined : _j;
                        if (maxTweets > 5000) {
                            throw new Error("We can analyze at most 5000 tweets");
                        }
                        params = {
                            twitterQuery: twitterQuery,
                            useTweetText: useTweetText,
                            useIdfNormalization: useIdfNormalization,
                            normalization: normalization,
                            maxTweets: maxTweets,
                            maxUsedLinks: maxUsedLinks,
                            maxConcepts: maxConcepts,
                            maxCategories: maxCategories,
                        };
                        if (notifyEmailAddress) {
                            params.notifyEmailAddress = notifyEmailAddress;
                        }
                        if (ignoreConceptTypes && Object.keys(ignoreConceptTypes).length > 0) {
                            params.ignoreConceptTypes = ignoreConceptTypes;
                        }
                        return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/trainTopicOnTwitter", params)];
                    case 1:
                        response = _k.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Create a new topic to train. The user should remember the "uri" parameter returned in the result.
     * @param name name of the topic we want to create
     * @returns object containing the "uri" property that should be used in the follow-up call to trainTopic* methods
     */
    Analytics.prototype.trainTopicCreateTopic = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/trainTopic", { action: "createTopic", name: name })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * If the topic is already existing, clear the definition of the topic. Use this if you want to retrain an existing topic
     * @param uri uri of the topic (obtained by calling trainTopicCreateTopic method) to clear
     */
    Analytics.prototype.trainTopicClearTopic = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/trainTopic", { action: "clearTopic", uri: uri })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Add the information extracted from the provided "text" to the topic with uri "uri".
     * @param uri uri of the topic (obtained by calling trainTopicCreateTopic method)
     * @param text text to analyze and extract information from
     */
    Analytics.prototype.trainTopicAddDocument = function (uri, text) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/trainTopic", { action: "addDocument", uri: uri, text: text })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    /**
     * Retrieve topic for the topic for which you have already finished training
     * @param uri uri of the topic (obtained by calling trainTopicCreateTopic method)
     * @returns returns the trained topic: { concepts: [], categories: [] }
     */
    Analytics.prototype.trainTopicGetTrainedTopic = function (uri_1) {
        return __awaiter(this, arguments, void 0, function (uri, args) {
            var _a, maxConcepts, _b, maxCategories, _c, idfNormalization, params, response;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = args.maxConcepts, maxConcepts = _a === void 0 ? 20 : _a, _b = args.maxCategories, maxCategories = _b === void 0 ? 10 : _b, _c = args.idfNormalization, idfNormalization = _c === void 0 ? true : _c;
                        params = {
                            action: "getTrainedTopic",
                            uri: uri,
                            maxConcepts: maxConcepts,
                            maxCategories: maxCategories,
                            idfNormalization: idfNormalization,
                        };
                        return [4 /*yield*/, this.er.jsonRequestAnalytics("/api/v1/trainTopic", params)];
                    case 1:
                        response = _d.sent();
                        return [2 /*return*/, response === null || response === void 0 ? void 0 : response.data];
                }
            });
        });
    };
    return Analytics;
}());
exports.Analytics = Analytics;
//# sourceMappingURL=analytics.js.map