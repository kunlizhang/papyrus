import { Query } from "./base";
import { EventRegistry } from "./eventRegistry";
import { ReturnInfo } from "./returnInfo";
import { ER } from "./types";
import { Data } from "./data";
export declare class QueryArticles extends Query<RequestArticles> {
    constructor(args?: ER.QueryArticles.Arguments);
    get path(): string;
    setRequestedResult(requestArticles: any): void;
    static initWithArticleUriList(...args: any[]): any;
    static initWithArticleUriWgtList(...args: any[]): any;
    static initWithComplexQuery(...args: any[]): any;
}
export declare class QueryArticlesIter extends QueryArticles implements AsyncIterable<Data.Article> {
    private readonly er;
    private readonly sortBy;
    private readonly sortByAsc;
    private readonly returnInfo;
    private readonly maxItems;
    private page;
    private pages;
    private items;
    private returnedSoFar;
    private index;
    private callback;
    private doneCallback;
    private errorMessage;
    constructor(er: EventRegistry, args?: {
        [name: string]: any;
    });
    /**
     * Async Iterator function that returns the next item in the list of articles
     */
    [Symbol.asyncIterator](): AsyncIterator<Data.Article>;
    count(): Promise<number>;
    execQuery(callback: (item: Data.Article) => void, doneCallback?: (error?: string) => void): void;
    static initWithComplexQuery(er: EventRegistry, complexQuery: any, params?: {
        [name: string]: any;
    }): QueryArticlesIter;
    private iterate;
    /**
     * Extract the results according to maxItems
     * @param response response from the backend
     */
    private extractResults;
    private get current();
    private getNextBatch;
}
export declare class RequestArticles {
}
export declare class RequestArticlesInfo extends RequestArticles {
    resultType: string;
    params: any;
    constructor(parameters?: ER.RequestArticlesInfoParameters);
}
export declare class RequestArticlesUriWgtList extends RequestArticles {
    resultType: string;
    params: any;
    constructor(parameters?: ER.RequestArticlesUriWgtListParameters);
    setPage(page: any): void;
}
export declare class RequestArticlesTimeAggr extends RequestArticles {
    resultType: string;
}
export declare class RequestArticlesConceptAggr extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ conceptCount, conceptCountPerType, conceptScoring, articlesSampleSize, returnInfo, ...unsupported }?: {
        conceptCount?: number;
        conceptCountPerType?: any;
        conceptScoring?: string;
        articlesSampleSize?: number;
        returnInfo?: ReturnInfo;
    });
}
export declare class RequestArticlesCategoryAggr extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ articlesSampleSize, returnInfo, ...unsupported }?: {
        articlesSampleSize?: number;
        returnInfo?: ReturnInfo;
    });
}
export declare class RequestArticlesSourceAggr extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ sourceCount, normalizeBySourceArts, returnInfo, ...unsupported }?: {
        sourceCount?: number;
        normalizeBySourceArts?: boolean;
        returnInfo?: ReturnInfo;
    });
}
export declare class RequestArticlesKeywordAggr extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ articlesSampleSize, ...unsupported }?: {
        articlesSampleSize?: number;
    });
}
export declare class RequestArticlesConceptGraph extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ conceptCount, linkCount, articlesSampleSize, skipQueryConcepts, returnInfo, ...unsupported }?: {
        conceptCount?: number;
        linkCount?: number;
        articlesSampleSize?: number;
        skipQueryConcepts?: boolean;
        returnInfo?: ReturnInfo;
    });
}
export declare class RequestArticlesConceptMatrix extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ conceptCount, measure, articlesSampleSize, returnInfo, ...unsupported }?: {
        conceptCount?: number;
        measure?: string;
        articlesSampleSize?: number;
        returnInfo?: ReturnInfo;
    });
}
export declare class RequestArticlesConceptTrends extends RequestArticles {
    resultType: string;
    params: any;
    constructor(parameters?: ER.RequestArticlesConceptTrendsParameters);
}
export declare class RequestArticlesDateMentionAggr extends RequestArticles {
    resultType: string;
}
export declare class RequestArticlesRecentActivity extends RequestArticles {
    resultType: string;
    params: any;
    constructor({ maxArticleCount, updatesAfterNewsUri, updatesafterBlogUri, updatesAfterPrUri, updatesAfterTm, updatesAfterMinsAgo, updatesUntilTm, updatesUntilMinsAgo, mandatorySourceLocation, returnInfo, ...unsupported }?: {
        maxArticleCount?: number;
        updatesAfterNewsUri?: any;
        updatesafterBlogUri?: any;
        updatesAfterPrUri?: any;
        updatesAfterTm?: any;
        updatesAfterMinsAgo?: any;
        updatesUntilTm?: any;
        updatesUntilMinsAgo?: any;
        mandatorySourceLocation?: boolean;
        returnInfo?: any;
    });
}
