"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComplexEventQuery = exports.ComplexArticleQuery = exports.CombinedQuery = exports.BaseQuery = exports.QueryCore = void 0;
var base_1 = require("./base");
var QueryCore = /** @class */ (function () {
    function QueryCore() {
        this.queryObj = {};
    }
    QueryCore.prototype.getQuery = function () {
        return this.queryObj;
    };
    QueryCore.prototype.setQueryParam = function (paramName, val) {
        this.queryObj[paramName] = val;
    };
    QueryCore.prototype.setValIfNotDefault = function (propName, value, defVal) {
        if (value !== defVal) {
            this.queryObj[propName] = value;
        }
    };
    return QueryCore;
}());
exports.QueryCore = QueryCore;
var BaseQuery = /** @class */ (function (_super) {
    __extends(BaseQuery, _super);
    /**
     * @param args Object which contains a host of optional parameters
     */
    function BaseQuery(parameters) {
        if (parameters === void 0) { parameters = {}; }
        var _this = _super.call(this) || this;
        var defaults = {
            keywordLoc: "body",
            categoryIncludeSub: true,
        };
        var args = __assign(__assign({}, defaults), parameters);
        _this.setQueryArrVal("keyword", args.keyword);
        _this.setQueryArrVal("conceptUri", args.conceptUri);
        _this.setQueryArrVal("categoryUri", args.categoryUri);
        _this.setQueryArrVal("sourceUri", args.sourceUri);
        _this.setQueryArrVal("locationUri", args.locationUri);
        _this.setQueryArrVal("lang", args.lang);
        if (args.dateStart != null) {
            _this.queryObj["dateStart"] = base_1.QueryParamsBase.encodeDateTime(args.dateStart, "YYYY-MM-DD");
        }
        if (args.dateEnd != null) {
            _this.queryObj["dateEnd"] = base_1.QueryParamsBase.encodeDateTime(args.dateEnd, "YYYY-MM-DD");
        }
        if (args.dateMention != null) {
            if (Array.isArray(args.dateMention)) {
                _this.queryObj["dateMention"] = args.dateMention.map(function (date) { return base_1.QueryParamsBase.encodeDateTime(date, "YYYY-MM-DD"); });
            }
            else {
                _this.queryObj["dateMention"] = base_1.QueryParamsBase.encodeDateTime(args.dateMention, "YYYY-MM-DD");
            }
        }
        _this.setQueryArrVal("sourceLocationUri", args.sourceLocationUri);
        _this.setQueryArrVal("sourceGroupUri", args.sourceGroupUri);
        _this.setQueryArrVal("authorUri", args.authorUri);
        if (!args.categoryIncludeSub) {
            _this.queryObj["categoryIncludeSub"] = false;
        }
        if (args.keywordLoc !== "body") {
            _this.queryObj["keywordLoc"] = args.keywordLoc;
        }
        if (args.minMaxArticlesInEvent != null) {
            if (!Array.isArray(args.minMaxArticlesInEvent) || args.minMaxArticlesInEvent.length !== 2) {
                throw new Error("minMaxArticlesInEvent parameter should either be None or a tuple with two integer values");
            }
            _this.queryObj["minArticlesInEvent"] = args.minMaxArticlesInEvent[0];
            _this.queryObj["maxArticlesInEvent"] = args.minMaxArticlesInEvent[1];
        }
        if (args.exclude != null) {
            if (!(args.exclude instanceof QueryCore)) {
                throw new Error("exclude parameter was not a CombinedQuery or BaseQuery instance");
            }
            _this.queryObj["$not"] = args.exclude.getQuery();
        }
        return _this;
    }
    BaseQuery.prototype.setQueryArrVal = function (propName, value) {
        if (value === null || value === undefined) {
            return;
        }
        if (value instanceof base_1.QueryItems) {
            this.queryObj[propName] = this.queryObj[propName] || {};
            this.queryObj[propName][value.getOper()] = value.getItems();
        }
        else if (typeof value === "string") {
            this.queryObj[propName] = value;
        }
        else {
            throw new Error("Parameter '".concat(propName, "' was of unsupported type. It should either be undefined, a string or an instance of QueryItems"));
        }
    };
    return BaseQuery;
}(QueryCore));
exports.BaseQuery = BaseQuery;
var CombinedQuery = /** @class */ (function (_super) {
    __extends(CombinedQuery, _super);
    function CombinedQuery() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a combined query with multiple items on which to perform an AND operation
     * @param queryArr a list of items on which to perform an AND operation. Items can be either a CombinedQuery or BaseQuery instances.
     * @param exclude Used to filter out results matching the other criteria specified in this query
     */
    CombinedQuery.AND = function (queryArr, exclude) {
        var e_1, _a;
        if (!Array.isArray(queryArr)) {
            throw new Error("provided argument as not a list");
        }
        if (queryArr.length === 0) {
            throw new Error("queryArr had an empty list");
        }
        var query = new CombinedQuery();
        query.queryObj["$and"] = [];
        try {
            for (var queryArr_1 = __values(queryArr), queryArr_1_1 = queryArr_1.next(); !queryArr_1_1.done; queryArr_1_1 = queryArr_1.next()) {
                var item = queryArr_1_1.value;
                if (!(item instanceof QueryCore)) {
                    throw new Error("item in the list was not a CombinedQuery or BaseQuery instance");
                }
                query.queryObj["$and"] = __spreadArray(__spreadArray([], __read(query.queryObj["$and"]), false), [item.getQuery()], false);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (queryArr_1_1 && !queryArr_1_1.done && (_a = queryArr_1.return)) _a.call(queryArr_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (exclude !== null && exclude !== undefined) {
            if (!(exclude instanceof QueryCore)) {
                throw new Error("exclude parameter was not a CombinedQuery or BaseQuery instance");
            }
            query.setQueryParam("$not", exclude.getQuery());
        }
        return query;
    };
    /**
     * Create a combined query with multiple items on which to perform an OR operation
     * @param queryArr A list of items on which to perform an OR operation.
     * @param exclude Used to filter out results matching the other criteria specified in this query.
     */
    CombinedQuery.OR = function (queryArr, exclude) {
        if (!Array.isArray(queryArr)) {
            throw new Error("provided argument as not a list");
        }
        if (queryArr.length === 0) {
            throw new Error("queryArr had an empty list");
        }
        var query = new CombinedQuery();
        query.queryObj["$or"] = [];
        queryArr.forEach(function (item) {
            if (!(item instanceof QueryCore)) {
                throw new Error("item in the list was not a CombinedQuery or BaseQuery instance");
            }
            query.queryObj["$or"] = __spreadArray(__spreadArray([], __read(query.queryObj["$or"]), false), [item.getQuery()], false);
        });
        if (exclude !== null && exclude !== undefined) {
            if (!(exclude instanceof QueryCore)) {
                throw new Error("exclude parameter was not a CombinedQuery or BaseQuery instance");
            }
            query.setQueryParam("$not", exclude.getQuery());
        }
        return query;
    };
    return CombinedQuery;
}(QueryCore));
exports.CombinedQuery = CombinedQuery;
/**
 * @class ComplexArticleQuery
 * Create an article query using a complex query
 */
var ComplexArticleQuery = /** @class */ (function (_super) {
    __extends(ComplexArticleQuery, _super);
    /**
     * @param query An instance of CombinedQuery or BaseQuery to use to find articles that match the conditions
     * @param args Object which contains a host of optional parameters
     */
    function ComplexArticleQuery(query, args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        var defaults = {
            dataType: "news",
            minSentiment: undefined,
            maxSentiment: undefined,
            minSocialScore: 0,
            minFacebookShares: 0,
            startSourceRankPercentile: 0,
            endSourceRankPercentile: 0,
            isDuplicateFilter: "keepAll",
            hasDuplicateFilter: "keepAll",
            eventFilter: "keepAll",
        };
        args = __assign(__assign({}, defaults), args);
        if (!(query instanceof QueryCore)) {
            throw new Error("query parameter was not a CombinedQuery or BaseQuery instance");
        }
        _this.queryObj["$query"] = query.getQuery();
        var filter = {};
        if (args.dataType !== "news") {
            filter["dataType"] = args.dataType;
        }
        if (args.minSentiment) {
            filter["minSentiment"] = args.minSentiment;
        }
        if (args.maxSentiment) {
            filter["maxSentiment"] = args.maxSentiment;
        }
        if (args.minSocialScore > 0) {
            filter["minSocialScore"] = args.minSocialScore;
        }
        if (args.minFacebookShares > 0) {
            filter["minFacebookShares"] = args.minFacebookShares;
        }
        if (args.startSourceRankPercentile !== 0) {
            filter["startSourceRankPercentile"] = args.startSourceRankPercentile;
        }
        if (args.endSourceRankPercentile !== 0) {
            filter["endSourceRankPercentile"] = args.endSourceRankPercentile;
        }
        if (args.isDuplicateFilter !== "keepAll") {
            filter["isDuplicate"] = args.isDuplicateFilter;
        }
        if (args.hasDuplicateFilter !== "keepAll") {
            filter["hasDuplicate"] = args.hasDuplicateFilter;
        }
        if (args.eventFilter !== "keepAll") {
            filter["hasEvent"] = args.eventFilter;
        }
        if (Object.keys(filter).length > 0) {
            _this.queryObj["$filter"] = filter;
        }
        return _this;
    }
    return ComplexArticleQuery;
}(QueryCore));
exports.ComplexArticleQuery = ComplexArticleQuery;
/**
 * @class ComplexEventQuery
 */
var ComplexEventQuery = /** @class */ (function (_super) {
    __extends(ComplexEventQuery, _super);
    /**
     * @param query an instance of CombinedQuery or BaseQuery to use to find events that match the conditions
     */
    function ComplexEventQuery(query, args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        if (!(query instanceof QueryCore)) {
            throw new Error("query parameter was not a CombinedQuery or BaseQuery instance");
        }
        _this.queryObj["$query"] = query.getQuery();
        var filter = {};
        if (args === null || args === void 0 ? void 0 : args.minSentiment) {
            filter["minSentiment"] = args.minSentiment;
        }
        if (args === null || args === void 0 ? void 0 : args.maxSentiment) {
            filter["maxSentiment"] = args.maxSentiment;
        }
        if (Object.keys(filter).length > 0) {
            _this.queryObj["$filter"] = filter;
        }
        return _this;
    }
    return ComplexEventQuery;
}(QueryCore));
exports.ComplexEventQuery = ComplexEventQuery;
//# sourceMappingURL=query.js.map