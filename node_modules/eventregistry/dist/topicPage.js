"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicPage = void 0;
var fs = require("fs");
var base_1 = require("./base");
var returnInfo_1 = require("./returnInfo");
var TopicPage = /** @class */ (function (_super) {
    __extends(TopicPage, _super);
    function TopicPage(eventRegistry) {
        var _this = _super.call(this) || this;
        _this.eventRegistry = eventRegistry;
        _this.emptyTopicPage = {
            autoAddArticles: true,
            articleHasDuplicate: "keepAll",
            articleHasEvent: "keepAll",
            articleIsDuplicate: "skipDuplicates",
            maxDaysBack: 7,
            articleTreshWgt: 0,
            eventTreshWgt: 0,
            concepts: [],
            keywords: [],
            categories: [],
            sources: [],
            sourceGroups: [],
            sourceLocations: [],
            locations: [],
            langs: [],
            restrictToSetConcepts: false,
            restrictToSetCategories: false,
            restrictToSetSources: false,
            restrictToSetLocations: false,
            dataType: ["news"]
        };
        _this.concept = {};
        _this.topicPage = _this.createEmptyTopicPage();
        return _this;
    }
    TopicPage.prototype.isTopicPage = function (definition) {
        return Object.keys(this.emptyTopicPage).sort().toString() === Object.keys(definition).sort().toString();
    };
    TopicPage.prototype.createEmptyTopicPage = function () {
        return this.emptyTopicPage;
    };
    /**
     * Load an existing topic page from Event Registry based on the topic page URI
     * @param uri uri of the topic page saved in your Event Registry account
     */
    TopicPage.prototype.loadTopicPageFromER = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a;
            var _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        params = {
                            action: "getTopicPageJson",
                            includeConceptDescription: true,
                            includeConceptImage: true,
                            includeTopicPageDefinition: true,
                            includeTopicPageOwner: true,
                            uri: uri
                        };
                        this.topicPage = this.createEmptyTopicPage();
                        _a = this;
                        return [4 /*yield*/, this.eventRegistry.jsonRequest("/api/v1/topicPage", params)];
                    case 1:
                        _a.concept = _e.sent();
                        if ((_c = (_b = this.concept) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.error) {
                            throw new Error(this.concept.data.error || "");
                        }
                        this.topicPage = __assign(__assign({}, this.topicPage), (((_d = this.concept.data) === null || _d === void 0 ? void 0 : _d.topicPage) || {}));
                        return [2 /*return*/, this.topicPage];
                }
            });
        });
    };
    /**
     * Load the topic page definition from an object
     * @param definition topic page definition
     */
    TopicPage.prototype.loadTopicPageFromDefinition = function (definition) {
        if (this.isTopicPage(definition)) {
            this.topicPage = definition;
        }
    };
    /**
     * Load topic page from an existing file
     * @param filepath file that contains the topic page definition
     */
    TopicPage.prototype.loadTopicPageFromFile = function (filepath) {
        if (fs && fs.existsSync(filepath)) {
            var definition = JSON.parse(fs.readFileSync(filepath, "utf8"));
            if (this.isTopicPage(definition)) {
                this.topicPage = definition;
            }
        }
    };
    /**
     * Return an object containing the topic page definition. you can use it to load a topic page later
     */
    TopicPage.prototype.saveTopicPageDefinition = function () {
        return this.topicPage;
    };
    /**
     * Save the topic page definition to a file
     * @param filepath location of the file to which you'll save the topic page definition
     */
    TopicPage.prototype.saveTopicPageDefinitionToFile = function (filepath) {
        fs.writeFileSync(filepath, JSON.stringify(this.topicPage, null, 4), "utf8");
    };
    Object.defineProperty(TopicPage.prototype, "articleThreshold", {
        /**
         * What is the minimum total weight that an article has to have in order to get it among the results?
         */
        set: function (value) {
            if (typeof value === "number" && value >= 0) {
                this.topicPage.articleTreshWgt = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "eventThreshold", {
        /**
         * What is the minimum total weight that an event has to have in order to get it among the results?
         */
        set: function (value) {
            if (typeof value === "number" && value >= 0) {
                this.topicPage.eventTreshWgt = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "articleIsDuplicateFilter", {
        /**
         * Some articles can be duplicates of other articles. What should be done with them. Possible values are:
         * "skipDuplicates" (skip the resulting articles that are duplicates of other articles),
         * "keepOnlyDuplicates" (return only the duplicate articles) and
         * "keepAll" (no filtering, default)
         */
        set: function (value) {
            if (value === "skipDuplicates" || value === "keepOnlyDuplicates" || value === "keepAll") {
                this.topicPage.articleIsDuplicate = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "articleHasEventFilter", {
        /**
         * Some articles describe a known event and some don't. This filter allows you to filter the resulting articles based on this criteria.
         * Possible values are:
         * "skipArticlesWithoutEvent" (skip articles that are not describing any known event in ER),
         * "keepOnlyArticlesWithoutEvent" (return only the articles that are not describing any known event in ER) and
         * "keepAll" (no filtering, default)
         */
        set: function (value) {
            if (value === "skipArticlesWithoutEvent" || value === "keepOnlyArticlesWithoutEvent" || value === "keepAll") {
                this.topicPage.articleHasEvent = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "articleHasDuplicateFilter", {
        /**
         * Some articles are later copied by others. What should be done with such articles. Possible values are:
         * "skipHasDuplicates" (skip the articles that have been later copied by others),
         * "keepOnlyHasDuplicates" (return only the articles that have been later copied by others) and
         * "keepAll" (no filtering, default)
         */
        set: function (value) {
            if (value === "skipHasDuplicates" || value === "keepOnlyHasDuplicates" || value === "keepAll") {
                this.topicPage.articleHasDuplicate = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "dataTypes", {
        /**
         * What data types should we search? "news" (news content, default), "pr" (press releases), or "blog".
         * If you want to use multiple data types, put them in an array (e.g. ["news", "pr"])
         */
        set: function (dataTypes) {
            this.topicPage.dataType = dataTypes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "sourceRankStartPercentile", {
        set: function (startPercentile) {
            if (startPercentile === undefined) {
                startPercentile = 0;
            }
            if (startPercentile < 0 || startPercentile > 90) {
                throw new RangeError("startPercentile is out of valid values (0 - 90)");
            }
            if (this.topicPage.endSourceRankPercentile !== null && typeof this.topicPage.endSourceRankPercentile === "number" && startPercentile >= this.topicPage.endSourceRankPercentile) {
                throw new RangeError("startPercentile has to be smaller than endPercentile");
            }
            if (startPercentile % 10 !== 0) {
                throw new Error("startPecentile has to be a multiple of 10");
            }
            this.topicPage.startSourceRankPercentile = startPercentile;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "sourceRankEndPercentile", {
        set: function (endPercentile) {
            if (endPercentile === undefined) {
                endPercentile = 100;
            }
            if (endPercentile < 10 || endPercentile > 100) {
                throw new RangeError("endPercentile is out of valid values (10 - 100)");
            }
            if (this.topicPage.startSourceRankPercentile !== null && typeof this.topicPage.startSourceRankPercentile === 'number' && this.topicPage.startSourceRankPercentile >= endPercentile) {
                throw new RangeError("startPercentile has to be smaller than endPercentile");
            }
            if (endPercentile % 10 !== 0) {
                throw new Error("endPercentile has to be a multiple of 10");
            }
            this.topicPage.endSourceRankPercentile = endPercentile;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "maxDaysBack", {
        /**
         * What is the maximum allowed age of the results?
         */
        set: function (maxDaysBack) {
            if (typeof maxDaysBack !== "number" || maxDaysBack < 0) {
                throw new Error("maxDaysBack value has to be a positive number");
            }
            if (maxDaysBack <= 0) {
                throw new RangeError("maxDaysBack value has to be a positive number");
            }
            this.topicPage.maxDaysBack = maxDaysBack;
        },
        enumerable: false,
        configurable: true
    });
    TopicPage.prototype.clearConcepts = function () {
        this.topicPage.concepts = [];
    };
    TopicPage.prototype.clearKeywords = function () {
        this.topicPage.keywords = [];
    };
    TopicPage.prototype.clearCategories = function () {
        this.topicPage.categories = [];
    };
    TopicPage.prototype.clearSources = function () {
        this.topicPage.sources = [];
    };
    TopicPage.prototype.clearSourceLocations = function () {
        this.topicPage.sourceLocations = [];
    };
    TopicPage.prototype.clearSourceGroups = function () {
        this.topicPage.sourceGroups = [];
    };
    TopicPage.prototype.clearLocations = function () {
        this.topicPage.locations = [];
    };
    /**
     * Add a relevant concept to the topic page
     * @param uri uri of the concept to be added
     * @param weight importance of the provided concept (typically in range 1 - 50)
     */
    TopicPage.prototype.addConcept = function (uri, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var label = args.label, conceptType = args.conceptType, _a = args.required, required = _a === void 0 ? false : _a, _b = args.excluded, excluded = _b === void 0 ? false : _b;
        if (required && excluded) {
            throw new Error("Parameters required and excluded can not be true at the same time");
        }
        var concept = { uri: uri, wgt: wgt, required: required, excluded: excluded };
        if (label !== undefined) {
            concept.label = label;
        }
        if (conceptType !== undefined) {
            concept.type = conceptType;
        }
        this.topicPage.concepts = __spreadArray(__spreadArray([], __read(this.topicPage.concepts), false), [concept], false);
    };
    /**
     * Add a relevant keyword to the topic page
     * @param keyword keyword or phrase to be added
     * @param weight importance of the provided keyword (typically in range 1 - 50)
     */
    TopicPage.prototype.addKeyword = function (keyword, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var _a = args.required, required = _a === void 0 ? false : _a, _b = args.excluded, excluded = _b === void 0 ? false : _b;
        this.topicPage.keywords = __spreadArray(__spreadArray([], __read(this.topicPage.keywords), false), [{ keyword: keyword, wgt: wgt, required: required, excluded: excluded }], false);
    };
    /**
     * Add a relevant category to the topic page
     * @param uri uri of the category to be added
     * @param weight importance of the provided category (typically in range 1 - 50)
     */
    TopicPage.prototype.addCategory = function (uri, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var _a = args.required, required = _a === void 0 ? false : _a, _b = args.excluded, excluded = _b === void 0 ? false : _b;
        this.topicPage.categories = __spreadArray(__spreadArray([], __read(this.topicPage.categories), false), [{ uri: uri, wgt: wgt, required: required, excluded: excluded }], false);
    };
    /**
     * Add a news source to the topic page
     * @param uri uri of the news source to add to the topic page
     * @param weight importance of the news source (typically in range 1 - 50)
     */
    TopicPage.prototype.addSource = function (uri, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var _a = args.excluded, excluded = _a === void 0 ? false : _a;
        this.topicPage.sources = __spreadArray(__spreadArray([], __read(this.topicPage.sources), false), [{ uri: uri, wgt: wgt, excluded: excluded }], false);
    };
    /**
     * Add a list of relevant sources by identifying them by their geographic location
     * @param uri uri of the location where the sources should be geographically located
     * @param weight importance of the provided list of sources (typically in range 1 - 50)
     */
    TopicPage.prototype.addSourceLocation = function (uri, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var _a = args.excluded, excluded = _a === void 0 ? false : _a;
        this.topicPage.sourceLocations = __spreadArray(__spreadArray([], __read(this.topicPage.sourceLocations), false), [{ uri: uri, wgt: wgt, excluded: excluded }], false);
    };
    /**
     * Add a list of relevant sources by specifying a whole source group to the topic page
     * @param sourceGroupUri uri of the source group to add
     * @param weight importance of the provided list of sources (typically in range 1 - 50)
     */
    TopicPage.prototype.addSourceGroup = function (uri, wgt, args) {
        if (args === void 0) { args = {}; }
        if (typeof wgt !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        var _a = args.excluded, excluded = _a === void 0 ? false : _a;
        this.topicPage.sourceGroups = __spreadArray(__spreadArray([], __read(this.topicPage.sourceGroups), false), [{ uri: uri, wgt: wgt, excluded: excluded }], false);
    };
    /**
     * Add relevant location to the topic page
     * @param locationUri uri of the location to add
     * @param weight importance of the provided location (typically in range 1 - 50)
     */
    TopicPage.prototype.addLocation = function (locationUri, weight) {
        if (typeof weight !== "number") {
            throw new Error("Weight value has to be a positive or negative number");
        }
        this.topicPage.locations = __spreadArray(__spreadArray([], __read(this.topicPage.locations), false), [{ uri: locationUri, wgt: weight }], false);
    };
    Object.defineProperty(TopicPage.prototype, "languages", {
        /**
         * Restrict the results to the list of specified languages
         */
        set: function (languages) {
            if (!Array.isArray(languages)) {
                languages = [languages];
            }
            if (languages.every(function (language) { return language.length === 3; })) {
                this.topicPage.langs = languages;
            }
            else {
                throw new Error("Expected to get language in ISO3 code");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "restrictToSetConceptsAndKeywords", {
        /**
         * if true then the results have to mention at least one of the specified concepts or keywords
         */
        set: function (restrict) {
            if (typeof restrict !== "boolean") {
                throw new Error("Restrict value has to be a boolean value");
            }
            this.topicPage.restrictToSetConcepts = restrict;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "restrictToSetCategories", {
        /**
         * if set to true then return only results that are assigned to one of the specified categories
         */
        set: function (restrict) {
            if (typeof restrict !== "boolean") {
                throw new Error("Restrict value has to be a boolean value");
            }
            this.topicPage.restrictToSetCategories = restrict;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "restrictToSetSources", {
        /**
         * if set to true then return only results from one of the specified news sources
         * this includes also sources set by source groups or by source locations
         */
        set: function (restrict) {
            if (typeof restrict !== "boolean") {
                throw new Error("Restrict value has to be a boolean value");
            }
            this.topicPage.restrictToSetSources = restrict;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TopicPage.prototype, "restrictToSetLocations", {
        /**
         * if set to true, then return only results that are located at one of the specified locations
         */
        set: function (restrict) {
            if (typeof restrict !== "boolean") {
                throw new Error("Restrict value has to be a boolean value");
            }
            this.topicPage.restrictToSetLocations = restrict;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return a list of articles that match the topic page
     * @param args {ER.TopicPageArticles} Object which contains a host of optional parameters
     */
    TopicPage.prototype.getArticles = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, page, _b, count, _c, sortBy, _d, sortByAsc, _e, dataType, _f, returnInfo, otherParameters, params, request;
            var _g;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 100 : _b, _c = args.sortBy, sortBy = _c === void 0 ? "rel" : _c, _d = args.sortByAsc, sortByAsc = _d === void 0 ? false : _d, _e = args.dataType, dataType = _e === void 0 ? "news" : _e, _f = args.returnInfo, returnInfo = _f === void 0 ? new returnInfo_1.ReturnInfo() : _f, otherParameters = __rest(args, ["page", "count", "sortBy", "sortByAsc", "dataType", "returnInfo"]);
                        if (page < 1) {
                            throw new RangeError("page has to be >= 1");
                        }
                        if (count > 100) {
                            throw new RangeError("At most 100 articles can be returned at a time");
                        }
                        params = __assign({ action: "getArticlesForTopicPage", resultType: "articles", dataType: this.topicPage.dataType, articlesCount: count, articlesSortBy: sortBy, articlesSortByAsc: sortByAsc, articlesPage: page, topicPage: JSON.stringify(this.topicPage) }, returnInfo.getParams());
                        if (Object.keys(otherParameters).length > 0) {
                            params = __assign(__assign({}, params), otherParameters);
                        }
                        return [4 /*yield*/, this.eventRegistry.jsonRequest("/api/v1/article", params)];
                    case 1:
                        request = _h.sent();
                        return [2 /*return*/, (_g = request === null || request === void 0 ? void 0 : request.data) !== null && _g !== void 0 ? _g : { articles: { results: [] } }];
                }
            });
        });
    };
    /**
     * Return a list of events that match the topic page
     * @param args {ER.TopicPageEvents} Object which contains a host of optional parameters
     */
    TopicPage.prototype.getEvents = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, page, _b, count, _c, sortBy, _d, sortByAsc, _e, returnInfo, otherParameters, params, request;
            var _f;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 50 : _b, _c = args.sortBy, sortBy = _c === void 0 ? "rel" : _c, _d = args.sortByAsc, sortByAsc = _d === void 0 ? false : _d, _e = args.returnInfo, returnInfo = _e === void 0 ? new returnInfo_1.ReturnInfo() : _e, otherParameters = __rest(args, ["page", "count", "sortBy", "sortByAsc", "returnInfo"]);
                        if (page < 1) {
                            throw new RangeError("page has to be >= 1");
                        }
                        if (count > 50) {
                            throw new RangeError("At most 50 events can be returned at a time");
                        }
                        params = __assign({ action: "getEventsForTopicPage", resultType: "events", dataType: this.topicPage.dataType, eventsCount: count, eventsSortBy: sortBy, eventsSortByAsc: sortByAsc, eventsPage: page, topicPage: JSON.stringify(this.topicPage) }, returnInfo.getParams());
                        if (Object.keys(otherParameters).length > 0) {
                            params = __assign(__assign({}, params), otherParameters);
                        }
                        return [4 /*yield*/, this.eventRegistry.jsonRequest("/api/v1/event", params)];
                    case 1:
                        request = _g.sent();
                        return [2 /*return*/, (_f = request === null || request === void 0 ? void 0 : request.data) !== null && _f !== void 0 ? _f : { events: { results: [] } }];
                }
            });
        });
    };
    return TopicPage;
}(base_1.QueryParamsBase));
exports.TopicPage = TopicPage;
//# sourceMappingURL=topicPage.js.map