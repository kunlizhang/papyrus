export declare const mainLangs: string[];
export declare const allLangs: string[];
export declare class QueryItems {
    static AND: (items: any) => QueryItems;
    static OR: (items: any) => QueryItems;
    private oper;
    private items;
    constructor(oper: any, items: any);
    getOper(): any;
    getItems(): any;
}
/**
 * @class QueryParamsBase
 * Base class for Query and AdminQuery
 * used for storing parameters for a query. Parameter values can either be
 * simple values (set by setVal()) or an array of values (set by multiple
 * calls to addArrayVal() method)
 */
export declare class QueryParamsBase {
    protected params: Record<string, unknown>;
    /**
     * Encode datetime into UTC ISO format which can be sent to ER.
     */
    static encodeDateTime(val: string | Date, format?: string): string;
    /**
     * Return the parameters.
     */
    getQueryParams(): Record<string, unknown>;
    /**
     * Set a value of a property in the query.
     */
    setVal(key: string, value: unknown): void;
    /**
     * Do we have in the query property named 'key'?
     */
    hasVal(key: string): boolean;
    /**
     * Remove the value of a property key (if existing).
     */
    clearVal(key: string): void;
    /**
     * Add a value to an array of values for a property.
     */
    addArrayVal(key: string, val: unknown): void;
    /**
     * Set value in query params if the 'val' is different from 'defVal'.
     */
    setValIfNotDefault(propName: string, val: unknown, defVal: unknown): void;
    /**
     * Set a property value that represents date.
     * Value can be string in YYYY-MM-DD format or a Date object.
     */
    setDateVal(propName: string, val: string | Date): void;
    /**
     * Parse the value "value" and use it to set the property propName and the operator with name propOperName
     * @param value String, QueryItems or an array.
     * @param propName Values to be set using property name propName.
     * @param propOperName Property to set containing the "and" or "or". Relevant only if multiple items are provided in "value". Can be None if only one value is possible.
     * @param defaultOperName Which operator should be used in case "value" is an array. If an array, we will print also a warning to suggest use of QueryItems.
     */
    setQueryArrVal(value: string | QueryItems | any[], propName: string, propOperName: string | undefined, defaultOperName: string): void;
}
export declare abstract class Query<T> extends QueryParamsBase {
    resultTypeList: T[];
    /**
     * Set it to a default path.
     */
    protected internalPath: string;
    protected params: Record<string, unknown>;
    get path(): string;
    set path(path: string);
    /**
     * Prepare the request parameters
     */
    getQueryParams(): any;
    getFormattedResultTypeList(): string | string[];
    abstract setRequestedResult(args: any): any;
}
/**
 * Utility function used in conjunction with a async/await and/or Promise
 */
export declare function sleep(ms: any): Promise<unknown>;
