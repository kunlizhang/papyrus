"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
var winston = require("winston");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
    LogLevel[LogLevel["REQUEST"] = 4] = "REQUEST";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * Logger class for logging messages either to console or to a file.
 */
var Logger = /** @class */ (function () {
    function Logger(_a) {
        var _b = _a.logging, logging = _b === void 0 ? false : _b, _c = _a.logRequests, logRequests = _c === void 0 ? false : _c;
        this._logLevel = LogLevel.INFO;
        this.customLevels = {
            levels: {
                error: 0,
                warn: 1,
                info: 2,
                debug: 3,
                request: 4
            },
            colors: {
                error: "red",
                warn: "yellow",
                info: "green",
                debug: "purple",
                request: "magenta"
            }
        };
        this._errorLog = new winston.transports.File({
            filename: "logs/error.log",
            level: "error",
        });
        this._infoLog = new winston.transports.File({
            filename: "logs/info.log",
            level: "info",
        });
        this._requestLog = new winston.transports.File({
            filename: "logs/requests.log",
            level: "request",
        });
        this._transports = [
            new winston.transports.Console()
        ];
        if (logging) {
            this._transports.push(this._errorLog);
            this._transports.push(this._infoLog);
        }
        if (logRequests) {
            this._transports.push(this._requestLog);
        }
        winston.addColors(this.customLevels.colors);
        this._logger = winston.createLogger({
            levels: this.customLevels.levels,
            format: winston.format.combine(winston.format.printf(function (info) { return "".concat(info.level, ": ").concat(info.message); })),
            level: LogLevel[this._logLevel].toLowerCase(),
            transports: this._transports
        });
    }
    Logger.createInstance = function (_a) {
        var _b = _a.logging, logging = _b === void 0 ? false : _b, _c = _a.logRequests, logRequests = _c === void 0 ? false : _c;
        if (!this._instance) {
            this._instance = new Logger({ logging: logging, logRequests: logRequests });
        }
        return this._instance;
    };
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (level) {
            this._logLevel = level;
            this._logger.level = LogLevel[level].toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    Logger.prototype.toggleRequestLogging = function (logRequests) {
        if (logRequests) {
            this.enableRequestLogging();
        }
        else {
            this.disableRequestLogging();
        }
    };
    Logger.prototype.enableRequestLogging = function () {
        this._logger.add(this._requestLog);
    };
    Logger.prototype.disableRequestLogging = function () {
        this._logger.remove(this._requestLog);
    };
    Logger.prototype.enableLogging = function () {
        this._logger.add(this._errorLog);
        this._logger.add(this._infoLog);
    };
    Logger.prototype.disableLogging = function () {
        this._logger.remove(this._errorLog);
        this._logger.remove(this._infoLog);
    };
    Logger.info = function (message) {
        this.createInstance({ logging: true, logRequests: true });
        this._instance._logger.info(message);
    };
    Logger.prototype.info = function (message) {
        this._logger.info(message);
    };
    Logger.error = function (message) {
        this.createInstance({ logging: true, logRequests: true });
        this._instance._logger.error(message);
    };
    Logger.prototype.error = function (message) {
        this._logger.error(message);
    };
    Logger.warn = function (message) {
        this.createInstance({ logging: true, logRequests: true });
        this._instance._logger.warn(message);
    };
    Logger.prototype.warn = function (message) {
        this._logger.warn(message);
    };
    Logger.debug = function (message) {
        this.createInstance({ logging: true, logRequests: true });
        this._instance._logger.debug(message);
    };
    Logger.prototype.debug = function (message) {
        this._logger.debug(message);
    };
    Logger.logRequest = function (message) {
        this.createInstance({ logging: true, logRequests: true });
        this._instance._logger.request(message);
    };
    Logger.prototype.logRequest = function (message) {
        this._logger.request(message);
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map