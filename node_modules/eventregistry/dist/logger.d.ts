export declare enum LogLevel {
    ERROR = 0,
    WARN = 1,
    INFO = 2,
    DEBUG = 3,
    REQUEST = 4
}
interface LoggerConfig {
    logging: boolean;
    logRequests: boolean;
}
/**
 * Logger class for logging messages either to console or to a file.
 */
export declare class Logger {
    private static _instance;
    private _logger;
    private _logLevel;
    private _transports;
    private customLevels;
    private readonly _errorLog;
    private readonly _infoLog;
    private readonly _requestLog;
    constructor({ logging, logRequests }: LoggerConfig);
    static createInstance({ logging, logRequests }: LoggerConfig): Logger;
    set logLevel(level: LogLevel);
    toggleRequestLogging(logRequests: boolean): void;
    enableRequestLogging(): void;
    disableRequestLogging(): void;
    enableLogging(): void;
    disableLogging(): void;
    get logLevel(): LogLevel;
    static info(message: string): void;
    info(message: string): void;
    static error(message: string): void;
    error(message: string): void;
    static warn(message: string): void;
    warn(message: string): void;
    static debug(message: string): void;
    debug(message: string): void;
    static logRequest(message: string): void;
    logRequest(message: string): void;
}
export {};
