import { QueryParamsBase } from "./base";
import { EventRegistry } from "./eventRegistry";
import { ER } from "./types";
export declare class TopicPage extends QueryParamsBase {
    private eventRegistry;
    private topicPage;
    private readonly emptyTopicPage;
    private concept;
    constructor(eventRegistry: EventRegistry);
    private isTopicPage;
    private createEmptyTopicPage;
    /**
     * Load an existing topic page from Event Registry based on the topic page URI
     * @param uri uri of the topic page saved in your Event Registry account
     */
    loadTopicPageFromER(uri: string): Promise<ER.TopicPage>;
    /**
     * Load the topic page definition from an object
     * @param definition topic page definition
     */
    loadTopicPageFromDefinition(definition: {}): void;
    /**
     * Load topic page from an existing file
     * @param filepath file that contains the topic page definition
     */
    loadTopicPageFromFile(filepath: string): void;
    /**
     * Return an object containing the topic page definition. you can use it to load a topic page later
     */
    saveTopicPageDefinition(): ER.TopicPage;
    /**
     * Save the topic page definition to a file
     * @param filepath location of the file to which you'll save the topic page definition
     */
    saveTopicPageDefinitionToFile(filepath: string): void;
    /**
     * What is the minimum total weight that an article has to have in order to get it among the results?
     */
    set articleThreshold(value: number);
    /**
     * What is the minimum total weight that an event has to have in order to get it among the results?
     */
    set eventThreshold(value: number);
    /**
     * Some articles can be duplicates of other articles. What should be done with them. Possible values are:
     * "skipDuplicates" (skip the resulting articles that are duplicates of other articles),
     * "keepOnlyDuplicates" (return only the duplicate articles) and
     * "keepAll" (no filtering, default)
     */
    set articleIsDuplicateFilter(value: "skipDuplicates" | "keepOnlyDuplicates" | "keepAll");
    /**
     * Some articles describe a known event and some don't. This filter allows you to filter the resulting articles based on this criteria.
     * Possible values are:
     * "skipArticlesWithoutEvent" (skip articles that are not describing any known event in ER),
     * "keepOnlyArticlesWithoutEvent" (return only the articles that are not describing any known event in ER) and
     * "keepAll" (no filtering, default)
     */
    set articleHasEventFilter(value: "skipArticlesWithoutEvent" | "keepOnlyArticlesWithoutEvent" | "keepAll");
    /**
     * Some articles are later copied by others. What should be done with such articles. Possible values are:
     * "skipHasDuplicates" (skip the articles that have been later copied by others),
     * "keepOnlyHasDuplicates" (return only the articles that have been later copied by others) and
     * "keepAll" (no filtering, default)
     */
    set articleHasDuplicateFilter(value: "skipHasDuplicates" | "keepOnlyHasDuplicates" | "keepAll");
    /**
     * What data types should we search? "news" (news content, default), "pr" (press releases), or "blog".
     * If you want to use multiple data types, put them in an array (e.g. ["news", "pr"])
     */
    set dataTypes(dataTypes: ER.DataType | ER.DataType[]);
    set sourceRankStartPercentile(startPercentile: number);
    set sourceRankEndPercentile(endPercentile: number);
    /**
     * What is the maximum allowed age of the results?
     */
    set maxDaysBack(maxDaysBack: number);
    clearConcepts(): void;
    clearKeywords(): void;
    clearCategories(): void;
    clearSources(): void;
    clearSourceLocations(): void;
    clearSourceGroups(): void;
    clearLocations(): void;
    /**
     * Add a relevant concept to the topic page
     * @param uri uri of the concept to be added
     * @param weight importance of the provided concept (typically in range 1 - 50)
     */
    addConcept(uri: string, wgt: number, args?: ER.TopicPageAddConceptArguments): void;
    /**
     * Add a relevant keyword to the topic page
     * @param keyword keyword or phrase to be added
     * @param weight importance of the provided keyword (typically in range 1 - 50)
     */
    addKeyword(keyword: string, wgt: number, args?: ER.TopicPageAddKeywordArguments): void;
    /**
     * Add a relevant category to the topic page
     * @param uri uri of the category to be added
     * @param weight importance of the provided category (typically in range 1 - 50)
     */
    addCategory(uri: string, wgt: number, args?: ER.TopicPageAddCategoryArguments): void;
    /**
     * Add a news source to the topic page
     * @param uri uri of the news source to add to the topic page
     * @param weight importance of the news source (typically in range 1 - 50)
     */
    addSource(uri: string, wgt: number, args?: ER.TopicPageAddSourceArguments): void;
    /**
     * Add a list of relevant sources by identifying them by their geographic location
     * @param uri uri of the location where the sources should be geographically located
     * @param weight importance of the provided list of sources (typically in range 1 - 50)
     */
    addSourceLocation(uri: string, wgt: number, args?: ER.TopicPageAddSourceLocationArguments): void;
    /**
     * Add a list of relevant sources by specifying a whole source group to the topic page
     * @param sourceGroupUri uri of the source group to add
     * @param weight importance of the provided list of sources (typically in range 1 - 50)
     */
    addSourceGroup(uri: string, wgt: number, args?: ER.TopicPageAddSourceGroupArguments): void;
    /**
     * Add relevant location to the topic page
     * @param locationUri uri of the location to add
     * @param weight importance of the provided location (typically in range 1 - 50)
     */
    addLocation(locationUri: string, weight: number): void;
    /**
     * Restrict the results to the list of specified languages
     */
    set languages(languages: string | string[]);
    /**
     * if true then the results have to mention at least one of the specified concepts or keywords
     */
    set restrictToSetConceptsAndKeywords(restrict: boolean);
    /**
     * if set to true then return only results that are assigned to one of the specified categories
     */
    set restrictToSetCategories(restrict: boolean);
    /**
     * if set to true then return only results from one of the specified news sources
     * this includes also sources set by source groups or by source locations
     */
    set restrictToSetSources(restrict: boolean);
    /**
     * if set to true, then return only results that are located at one of the specified locations
     */
    set restrictToSetLocations(restrict: boolean);
    /**
     * Return a list of articles that match the topic page
     * @param args {ER.TopicPageArticles} Object which contains a host of optional parameters
     */
    getArticles(args?: ER.TopicPageArticles): Promise<unknown>;
    /**
     * Return a list of events that match the topic page
     * @param args {ER.TopicPageEvents} Object which contains a host of optional parameters
     */
    getEvents(args?: ER.TopicPageEvents): Promise<unknown>;
}
